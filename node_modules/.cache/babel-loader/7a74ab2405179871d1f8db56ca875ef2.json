{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\peter\\\\Desktop\\\\lfz\\\\covid_tracker\\\\src\\\\Components\\\\LineGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport Modal from \"./Modal/Modal\";\nimport \"./Modal/Modal.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD/YY\",\n        tooltipFormat: \"lll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\n\nfunction buildChartData(data, casesType) {\n  let chartData = [];\n  let lastDataPoint;\n\n  for (let date in data[casesType]) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint\n      };\n      chartData.push(newDataPoint);\n    }\n\n    lastDataPoint = data[casesType][date];\n  }\n\n  ;\n  return chartData;\n}\n\nfunction LineGraph({\n  casesType,\n  countryCode\n}) {\n  _s();\n\n  const [data, setData] = useState({});\n  const [showing, SetShowing] = useState(false);\n  const [APImessage, SetAPImessage] = useState(\"\");\n  let lineUrl = countryCode === \"WorldWide\" ? `https://disease.sh/v3/covid-19/historical/all?lastdays=120    ` : `https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=120`;\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        await fetch(lineUrl).then(res => {\n          return res.json();\n        }).then(data => {\n          if (!data.message) {\n            if (countryCode === \"WorldWide\") {\n              let chartData = buildChartData(data, casesType);\n              return setData(chartData);\n            } else {\n              let chartData = buildChartData(data.timeline, casesType);\n              return setData(chartData);\n            }\n          } else {\n            SetAPImessage(data.message);\n            SetShowing(true);\n          }\n        }).catch(error => {\n          console.log(`error: Country ${countryCode} is not updated!`);\n        });\n      };\n\n      fetchData();\n    } catch {\n      console.log(`error: Country ${countryCode} is not updated!`);\n    }\n  }, [casesType, lineUrl, countryCode]);\n\n  function toggleElement() {\n    SetShowing(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [data.length > 0 && /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        datasets: [{\n          data: data,\n          backgroundColor: \"rgba(204,16,92,0.1)\",\n          borderColor: \"#CC1034\"\n        }]\n      },\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isShowing: showing,\n      toggleElement: toggleElement,\n      message: APImessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LineGraph, \"57LIhtpUxk/XE2OR9YHc0sTskII=\");\n\n_c = LineGraph;\nexport default LineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"sources":["C:/Users/peter/Desktop/lfz/covid_tracker/src/Components/LineGraph.js"],"names":["React","useState","useEffect","Line","numeral","Modal","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","chartData","lastDataPoint","date","newDataPoint","x","y","push","LineGraph","countryCode","setData","showing","SetShowing","APImessage","SetAPImessage","lineUrl","fetchData","fetch","then","res","json","message","timeline","catch","error","console","log","toggleElement","length","datasets","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport Modal from \"./Modal/Modal\";\nimport \"./Modal/Modal.css\";\n\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"lll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nfunction buildChartData(data, casesType) {\n  let chartData = [];\n  let lastDataPoint;\n\n  for (let date in data[casesType]) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      }\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  };\n  return chartData;\n}\n\nfunction LineGraph({ casesType, countryCode }) {\n  const [data, setData] = useState({});\n  const [showing, SetShowing] = useState(false);\n  const [APImessage, SetAPImessage] = useState(\"\");\n\n  let lineUrl = countryCode === \"WorldWide\"\n    ? `https://disease.sh/v3/covid-19/historical/all?lastdays=120    `\n    : `https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=120`;\n\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        await fetch(lineUrl)\n          .then(res => { return res.json() })\n          .then(data => {\n            if (!data.message) {\n              if (countryCode === \"WorldWide\") {\n                let chartData = buildChartData(data, casesType);\n                return setData(chartData);\n              } else {\n                let chartData = buildChartData(data.timeline, casesType);\n                return setData(chartData);\n              }\n            } else {\n              SetAPImessage(data.message);\n              SetShowing(true);\n            }\n\n          })\n          .catch(error => {\n            console.log(`error: Country ${countryCode} is not updated!`);\n          })\n      }\n      fetchData();\n    } catch{\n      console.log(`error: Country ${countryCode} is not updated!`);\n    }\n  }, [casesType, lineUrl, countryCode]);\n\n  function toggleElement() {\n    SetShowing(false);\n  }\n\n  return (\n    <div>\n      {data.length > 0 && (\n        <Line\n          data={\n            {\n              datasets: [\n                {\n                  data: data,\n                  backgroundColor: \"rgba(204,16,92,0.1)\",\n                  borderColor: \"#CC1034\",\n                }\n              ]\n            }\n          }\n          options={options}\n        />\n      )}\n      <Modal isShowing={showing} toggleElement={toggleElement} message={APImessage} />\n    </div>\n  )\n}\n\nexport default LineGraph\n\n\n"]},"metadata":{},"sourceType":"module"}